//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASPServer.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Appointment", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Appointment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ASPServer.ServiceReference.Buyer BuyerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ASPServer.ServiceReference.Seller SellerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StarTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ASPServer.ServiceReference.Buyer Buyer {
            get {
                return this.BuyerField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyerField, value) != true)) {
                    this.BuyerField = value;
                    this.RaisePropertyChanged("Buyer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ASPServer.ServiceReference.Seller Seller {
            get {
                return this.SellerField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerField, value) != true)) {
                    this.SellerField = value;
                    this.RaisePropertyChanged("Seller");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StarTime {
            get {
                return this.StarTimeField;
            }
            set {
                if ((this.StarTimeField.Equals(value) != true)) {
                    this.StarTimeField = value;
                    this.RaisePropertyChanged("StarTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Buyer", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Buyer : ASPServer.ServiceReference.Person {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowedEmailSpamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ApprovedAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BuyerApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ContactAllowedByBoligOneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ContactAllowedByRealField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DesiredRoomsMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DesiredRoomsMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EstateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InRKIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LivesForRentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ASPServer.ServiceReference.Location> LocationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LotSizeMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LotSizeMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OtherPrefField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OwnesHouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProbertySizeMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProbertySizeMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ASPServer.ServiceReference.Property> PropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowedEmailSpam {
            get {
                return this.AllowedEmailSpamField;
            }
            set {
                if ((this.AllowedEmailSpamField.Equals(value) != true)) {
                    this.AllowedEmailSpamField = value;
                    this.RaisePropertyChanged("AllowedEmailSpam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ApprovedAmount {
            get {
                return this.ApprovedAmountField;
            }
            set {
                if ((this.ApprovedAmountField.Equals(value) != true)) {
                    this.ApprovedAmountField = value;
                    this.RaisePropertyChanged("ApprovedAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bank {
            get {
                return this.BankField;
            }
            set {
                if ((object.ReferenceEquals(this.BankField, value) != true)) {
                    this.BankField = value;
                    this.RaisePropertyChanged("Bank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BuyerApproved {
            get {
                return this.BuyerApprovedField;
            }
            set {
                if ((this.BuyerApprovedField.Equals(value) != true)) {
                    this.BuyerApprovedField = value;
                    this.RaisePropertyChanged("BuyerApproved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ContactAllowedByBoligOne {
            get {
                return this.ContactAllowedByBoligOneField;
            }
            set {
                if ((this.ContactAllowedByBoligOneField.Equals(value) != true)) {
                    this.ContactAllowedByBoligOneField = value;
                    this.RaisePropertyChanged("ContactAllowedByBoligOne");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ContactAllowedByReal {
            get {
                return this.ContactAllowedByRealField;
            }
            set {
                if ((this.ContactAllowedByRealField.Equals(value) != true)) {
                    this.ContactAllowedByRealField = value;
                    this.RaisePropertyChanged("ContactAllowedByReal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DesiredRoomsMax {
            get {
                return this.DesiredRoomsMaxField;
            }
            set {
                if ((this.DesiredRoomsMaxField.Equals(value) != true)) {
                    this.DesiredRoomsMaxField = value;
                    this.RaisePropertyChanged("DesiredRoomsMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DesiredRoomsMin {
            get {
                return this.DesiredRoomsMinField;
            }
            set {
                if ((this.DesiredRoomsMinField.Equals(value) != true)) {
                    this.DesiredRoomsMinField = value;
                    this.RaisePropertyChanged("DesiredRoomsMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EstateType {
            get {
                return this.EstateTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EstateTypeField, value) != true)) {
                    this.EstateTypeField = value;
                    this.RaisePropertyChanged("EstateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InRKI {
            get {
                return this.InRKIField;
            }
            set {
                if ((this.InRKIField.Equals(value) != true)) {
                    this.InRKIField = value;
                    this.RaisePropertyChanged("InRKI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LivesForRent {
            get {
                return this.LivesForRentField;
            }
            set {
                if ((this.LivesForRentField.Equals(value) != true)) {
                    this.LivesForRentField = value;
                    this.RaisePropertyChanged("LivesForRent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ASPServer.ServiceReference.Location> Locations {
            get {
                return this.LocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationsField, value) != true)) {
                    this.LocationsField = value;
                    this.RaisePropertyChanged("Locations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LotSizeMax {
            get {
                return this.LotSizeMaxField;
            }
            set {
                if ((this.LotSizeMaxField.Equals(value) != true)) {
                    this.LotSizeMaxField = value;
                    this.RaisePropertyChanged("LotSizeMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LotSizeMin {
            get {
                return this.LotSizeMinField;
            }
            set {
                if ((this.LotSizeMinField.Equals(value) != true)) {
                    this.LotSizeMinField = value;
                    this.RaisePropertyChanged("LotSizeMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxPrice {
            get {
                return this.MaxPriceField;
            }
            set {
                if ((this.MaxPriceField.Equals(value) != true)) {
                    this.MaxPriceField = value;
                    this.RaisePropertyChanged("MaxPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinPrice {
            get {
                return this.MinPriceField;
            }
            set {
                if ((this.MinPriceField.Equals(value) != true)) {
                    this.MinPriceField = value;
                    this.RaisePropertyChanged("MinPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OtherPref {
            get {
                return this.OtherPrefField;
            }
            set {
                if ((object.ReferenceEquals(this.OtherPrefField, value) != true)) {
                    this.OtherPrefField = value;
                    this.RaisePropertyChanged("OtherPref");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OwnesHouse {
            get {
                return this.OwnesHouseField;
            }
            set {
                if ((this.OwnesHouseField.Equals(value) != true)) {
                    this.OwnesHouseField = value;
                    this.RaisePropertyChanged("OwnesHouse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProbertySizeMax {
            get {
                return this.ProbertySizeMaxField;
            }
            set {
                if ((this.ProbertySizeMaxField.Equals(value) != true)) {
                    this.ProbertySizeMaxField = value;
                    this.RaisePropertyChanged("ProbertySizeMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProbertySizeMin {
            get {
                return this.ProbertySizeMinField;
            }
            set {
                if ((this.ProbertySizeMinField.Equals(value) != true)) {
                    this.ProbertySizeMinField = value;
                    this.RaisePropertyChanged("ProbertySizeMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Seller", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Seller : ASPServer.ServiceReference.Person {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ASPServer.ServiceReference.Property> PropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ASPServer.ServiceReference.Seller))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ASPServer.ServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ASPServer.ServiceReference.Buyer))]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Misc {
            get {
                return this.MiscField;
            }
            set {
                if ((object.ReferenceEquals(this.MiscField, value) != true)) {
                    this.MiscField = value;
                    this.RaisePropertyChanged("Misc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class User : ASPServer.ServiceReference.Person {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> AppointmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> Appointments {
            get {
                return this.AppointmentsField;
            }
            set {
                if ((object.ReferenceEquals(this.AppointmentsField, value) != true)) {
                    this.AppointmentsField = value;
                    this.RaisePropertyChanged("Appointments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ASPServer.ServiceReference.Buyer> BuyersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ASPServer.ServiceReference.Buyer> Buyers {
            get {
                return this.BuyersField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyersField, value) != true)) {
                    this.BuyersField = value;
                    this.RaisePropertyChanged("Buyers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Property", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Property : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ASPServer.ServiceReference.Buyer> BuyersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConstructionYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FloorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HouseSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PropertySizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SellerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ASPServer.ServiceReference.Buyer> Buyers {
            get {
                return this.BuyersField;
            }
            set {
                if ((object.ReferenceEquals(this.BuyersField, value) != true)) {
                    this.BuyersField = value;
                    this.RaisePropertyChanged("Buyers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConstructionYear {
            get {
                return this.ConstructionYearField;
            }
            set {
                if ((this.ConstructionYearField.Equals(value) != true)) {
                    this.ConstructionYearField = value;
                    this.RaisePropertyChanged("ConstructionYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Floors {
            get {
                return this.FloorsField;
            }
            set {
                if ((this.FloorsField.Equals(value) != true)) {
                    this.FloorsField = value;
                    this.RaisePropertyChanged("Floors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HouseSize {
            get {
                return this.HouseSizeField;
            }
            set {
                if ((this.HouseSizeField.Equals(value) != true)) {
                    this.HouseSizeField = value;
                    this.RaisePropertyChanged("HouseSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PropertySize {
            get {
                return this.PropertySizeField;
            }
            set {
                if ((this.PropertySizeField.Equals(value) != true)) {
                    this.PropertySizeField = value;
                    this.RaisePropertyChanged("PropertySize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rooms {
            get {
                return this.RoomsField;
            }
            set {
                if ((this.RoomsField.Equals(value) != true)) {
                    this.RoomsField = value;
                    this.RaisePropertyChanged("Rooms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SellerID {
            get {
                return this.SellerIDField;
            }
            set {
                if ((this.SellerIDField.Equals(value) != true)) {
                    this.SellerIDField = value;
                    this.RaisePropertyChanged("SellerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertAppointment", ReplyAction="http://tempuri.org/IService/InsertAppointmentResponse")]
        void InsertAppointment(ASPServer.ServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertAppointment", ReplyAction="http://tempuri.org/IService/InsertAppointmentResponse")]
        System.Threading.Tasks.Task InsertAppointmentAsync(ASPServer.ServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAppointment", ReplyAction="http://tempuri.org/IService/GetAppointmentResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> GetAppointment(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAppointment", ReplyAction="http://tempuri.org/IService/GetAppointmentResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Appointment>> GetAppointmentAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllAppointments", ReplyAction="http://tempuri.org/IService/GetAllAppointmentsResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> GetAllAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllAppointments", ReplyAction="http://tempuri.org/IService/GetAllAppointmentsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Appointment>> GetAllAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateAppointment", ReplyAction="http://tempuri.org/IService/UpdateAppointmentResponse")]
        void UpdateAppointment(ASPServer.ServiceReference.Appointment appointment, System.DateTime date, System.DateTime StartTime, System.DateTime EndTime, string category, string descricption, string status, ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateAppointment", ReplyAction="http://tempuri.org/IService/UpdateAppointmentResponse")]
        System.Threading.Tasks.Task UpdateAppointmentAsync(ASPServer.ServiceReference.Appointment appointment, System.DateTime date, System.DateTime StartTime, System.DateTime EndTime, string category, string descricption, string status, ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAppointment", ReplyAction="http://tempuri.org/IService/DeleteAppointmentResponse")]
        void DeleteAppointment(ASPServer.ServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteAppointment", ReplyAction="http://tempuri.org/IService/DeleteAppointmentResponse")]
        System.Threading.Tasks.Task DeleteAppointmentAsync(ASPServer.ServiceReference.Appointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertBuyer", ReplyAction="http://tempuri.org/IService/InsertBuyerResponse")]
        void InsertBuyer(ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertBuyer", ReplyAction="http://tempuri.org/IService/InsertBuyerResponse")]
        System.Threading.Tasks.Task InsertBuyerAsync(ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBuyerByPhone", ReplyAction="http://tempuri.org/IService/GetBuyerByPhoneResponse")]
        ASPServer.ServiceReference.Buyer GetBuyerByPhone(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBuyerByPhone", ReplyAction="http://tempuri.org/IService/GetBuyerByPhoneResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Buyer> GetBuyerByPhoneAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBuyerByMobile", ReplyAction="http://tempuri.org/IService/GetBuyerByMobileResponse")]
        ASPServer.ServiceReference.Buyer GetBuyerByMobile(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBuyerByMobile", ReplyAction="http://tempuri.org/IService/GetBuyerByMobileResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Buyer> GetBuyerByMobileAsync(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBuyers", ReplyAction="http://tempuri.org/IService/GetAllBuyersResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Buyer> GetAllBuyers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBuyers", ReplyAction="http://tempuri.org/IService/GetAllBuyersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Buyer>> GetAllBuyersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllLocationsByPhone", ReplyAction="http://tempuri.org/IService/GetAllLocationsByPhoneResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetAllLocationsByPhone(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllLocationsByPhone", ReplyAction="http://tempuri.org/IService/GetAllLocationsByPhoneResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetAllLocationsByPhoneAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllLocationsByMobile", ReplyAction="http://tempuri.org/IService/GetAllLocationsByMobileResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetAllLocationsByMobile(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllLocationsByMobile", ReplyAction="http://tempuri.org/IService/GetAllLocationsByMobileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetAllLocationsByMobileAsync(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPropertiesByPhone", ReplyAction="http://tempuri.org/IService/GetAllPropertiesByPhoneResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllPropertiesByPhone(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPropertiesByPhone", ReplyAction="http://tempuri.org/IService/GetAllPropertiesByPhoneResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesByPhoneAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPropertiesByMobile", ReplyAction="http://tempuri.org/IService/GetAllPropertiesByMobileResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllPropertiesByMobile(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPropertiesByMobile", ReplyAction="http://tempuri.org/IService/GetAllPropertiesByMobileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesByMobileAsync(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBuyer", ReplyAction="http://tempuri.org/IService/UpdateBuyerResponse")]
        void UpdateBuyer(
                    ASPServer.ServiceReference.Buyer buyer, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, 
                    string name, 
                    string address, 
                    string zipCode, 
                    string phone, 
                    string mobil, 
                    string email, 
                    string misc, 
                    string estateType, 
                    double minPrice, 
                    double maxPrice, 
                    double lotSizeMin, 
                    double lotSizeMax, 
                    double probertySizeMin, 
                    double probertySizeMax, 
                    double desiredRoomsMin, 
                    double desiredRoomsMax, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Location> desiredLocations, 
                    string otherPref, 
                    bool contactAllowedByBoligOne, 
                    bool contactAllowedByReal, 
                    bool allowedEmailSpam, 
                    bool inRKI, 
                    bool buyerApproved, 
                    string bank, 
                    bool ownesHouse, 
                    bool livesForRent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBuyer", ReplyAction="http://tempuri.org/IService/UpdateBuyerResponse")]
        System.Threading.Tasks.Task UpdateBuyerAsync(
                    ASPServer.ServiceReference.Buyer buyer, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, 
                    string name, 
                    string address, 
                    string zipCode, 
                    string phone, 
                    string mobil, 
                    string email, 
                    string misc, 
                    string estateType, 
                    double minPrice, 
                    double maxPrice, 
                    double lotSizeMin, 
                    double lotSizeMax, 
                    double probertySizeMin, 
                    double probertySizeMax, 
                    double desiredRoomsMin, 
                    double desiredRoomsMax, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Location> desiredLocations, 
                    string otherPref, 
                    bool contactAllowedByBoligOne, 
                    bool contactAllowedByReal, 
                    bool allowedEmailSpam, 
                    bool inRKI, 
                    bool buyerApproved, 
                    string bank, 
                    bool ownesHouse, 
                    bool livesForRent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBuyerSingle", ReplyAction="http://tempuri.org/IService/UpdateBuyerSingleResponse")]
        void UpdateBuyerSingle(ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBuyerSingle", ReplyAction="http://tempuri.org/IService/UpdateBuyerSingleResponse")]
        System.Threading.Tasks.Task UpdateBuyerSingleAsync(ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBuyer", ReplyAction="http://tempuri.org/IService/DeleteBuyerResponse")]
        void DeleteBuyer(ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBuyer", ReplyAction="http://tempuri.org/IService/DeleteBuyerResponse")]
        System.Threading.Tasks.Task DeleteBuyerAsync(ASPServer.ServiceReference.Buyer buyer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertLocation", ReplyAction="http://tempuri.org/IService/InsertLocationResponse")]
        void InsertLocation(ASPServer.ServiceReference.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertLocation", ReplyAction="http://tempuri.org/IService/InsertLocationResponse")]
        System.Threading.Tasks.Task InsertLocationAsync(ASPServer.ServiceReference.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLocation", ReplyAction="http://tempuri.org/IService/GetLocationResponse")]
        ASPServer.ServiceReference.Location GetLocation(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLocation", ReplyAction="http://tempuri.org/IService/GetLocationResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Location> GetLocationAsync(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLocationsByCity", ReplyAction="http://tempuri.org/IService/GetLocationsByCityResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetLocationsByCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLocationsByCity", ReplyAction="http://tempuri.org/IService/GetLocationsByCityResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetLocationsByCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllLocations", ReplyAction="http://tempuri.org/IService/GetAllLocationsResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetAllLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllLocations", ReplyAction="http://tempuri.org/IService/GetAllLocationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetAllLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateLocation", ReplyAction="http://tempuri.org/IService/UpdateLocationResponse")]
        void UpdateLocation(ASPServer.ServiceReference.Location loc, string zipCode, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateLocation", ReplyAction="http://tempuri.org/IService/UpdateLocationResponse")]
        System.Threading.Tasks.Task UpdateLocationAsync(ASPServer.ServiceReference.Location loc, string zipCode, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteLocation", ReplyAction="http://tempuri.org/IService/DeleteLocationResponse")]
        void DeleteLocation(ASPServer.ServiceReference.Location loc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteLocation", ReplyAction="http://tempuri.org/IService/DeleteLocationResponse")]
        System.Threading.Tasks.Task DeleteLocationAsync(ASPServer.ServiceReference.Location loc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertProperty", ReplyAction="http://tempuri.org/IService/InsertPropertyResponse")]
        void InsertProperty(ASPServer.ServiceReference.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertProperty", ReplyAction="http://tempuri.org/IService/InsertPropertyResponse")]
        System.Threading.Tasks.Task InsertPropertyAsync(ASPServer.ServiceReference.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProperty", ReplyAction="http://tempuri.org/IService/GetPropertyResponse")]
        ASPServer.ServiceReference.Property GetProperty(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProperty", ReplyAction="http://tempuri.org/IService/GetPropertyResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Property> GetPropertyAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPropertiesByAddress", ReplyAction="http://tempuri.org/IService/GetPropertiesByAddressResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetPropertiesByAddress(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPropertiesByAddress", ReplyAction="http://tempuri.org/IService/GetPropertiesByAddressResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetPropertiesByAddressAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllProperties", ReplyAction="http://tempuri.org/IService/GetAllPropertiesResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllProperties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllProperties", ReplyAction="http://tempuri.org/IService/GetAllPropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProperty", ReplyAction="http://tempuri.org/IService/UpdatePropertyResponse")]
        void UpdateProperty(ASPServer.ServiceReference.Property property, string address, string zipCode, string type, int rooms, int floors, double price, double propertySize, double houseSize, int constructionYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateProperty", ReplyAction="http://tempuri.org/IService/UpdatePropertyResponse")]
        System.Threading.Tasks.Task UpdatePropertyAsync(ASPServer.ServiceReference.Property property, string address, string zipCode, string type, int rooms, int floors, double price, double propertySize, double houseSize, int constructionYear);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteProperty", ReplyAction="http://tempuri.org/IService/DeletePropertyResponse")]
        void DeleteProperty(ASPServer.ServiceReference.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteProperty", ReplyAction="http://tempuri.org/IService/DeletePropertyResponse")]
        System.Threading.Tasks.Task DeletePropertyAsync(ASPServer.ServiceReference.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPropertyBySellerID", ReplyAction="http://tempuri.org/IService/GetPropertyBySellerIDResponse")]
        ASPServer.ServiceReference.Property GetPropertyBySellerID(int sellerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPropertyBySellerID", ReplyAction="http://tempuri.org/IService/GetPropertyBySellerIDResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Property> GetPropertyBySellerIDAsync(int sellerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertSeller", ReplyAction="http://tempuri.org/IService/InsertSellerResponse")]
        void InsertSeller(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertSeller", ReplyAction="http://tempuri.org/IService/InsertSellerResponse")]
        System.Threading.Tasks.Task InsertSellerAsync(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSellerById", ReplyAction="http://tempuri.org/IService/GetSellerByIdResponse")]
        ASPServer.ServiceReference.Seller GetSellerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSellerById", ReplyAction="http://tempuri.org/IService/GetSellerByIdResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Seller> GetSellerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSellerByPhone", ReplyAction="http://tempuri.org/IService/GetSellerByPhoneResponse")]
        ASPServer.ServiceReference.Seller GetSellerByPhone(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSellerByPhone", ReplyAction="http://tempuri.org/IService/GetSellerByPhoneResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Seller> GetSellerByPhoneAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSellerByMobile", ReplyAction="http://tempuri.org/IService/GetSellerByMobileResponse")]
        ASPServer.ServiceReference.Seller GetSellerByMobile(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSellerByMobile", ReplyAction="http://tempuri.org/IService/GetSellerByMobileResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Seller> GetSellerByMobileAsync(string mobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSellers", ReplyAction="http://tempuri.org/IService/GetAllSellersResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Seller> GetAllSellers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllSellers", ReplyAction="http://tempuri.org/IService/GetAllSellersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Seller>> GetAllSellersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSeller", ReplyAction="http://tempuri.org/IService/UpdateSellerResponse")]
        void UpdateSeller(ASPServer.ServiceReference.Seller seller, System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, string name, string address, string zipCode, string phone, string mobil, string email, string misc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSeller", ReplyAction="http://tempuri.org/IService/UpdateSellerResponse")]
        System.Threading.Tasks.Task UpdateSellerAsync(ASPServer.ServiceReference.Seller seller, System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, string name, string address, string zipCode, string phone, string mobil, string email, string misc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSellerSingle", ReplyAction="http://tempuri.org/IService/UpdateSellerSingleResponse")]
        void UpdateSellerSingle(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateSellerSingle", ReplyAction="http://tempuri.org/IService/UpdateSellerSingleResponse")]
        System.Threading.Tasks.Task UpdateSellerSingleAsync(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteSeller", ReplyAction="http://tempuri.org/IService/DeleteSellerResponse")]
        void DeleteSeller(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteSeller", ReplyAction="http://tempuri.org/IService/DeleteSellerResponse")]
        System.Threading.Tasks.Task DeleteSellerAsync(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPropertyToSeller", ReplyAction="http://tempuri.org/IService/AddPropertyToSellerResponse")]
        void AddPropertyToSeller(ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPropertyToSeller", ReplyAction="http://tempuri.org/IService/AddPropertyToSellerResponse")]
        System.Threading.Tasks.Task AddPropertyToSellerAsync(ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Property property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPropertiesFromSeller", ReplyAction="http://tempuri.org/IService/GetAllPropertiesFromSellerResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllPropertiesFromSeller(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllPropertiesFromSeller", ReplyAction="http://tempuri.org/IService/GetAllPropertiesFromSellerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesFromSellerAsync(ASPServer.ServiceReference.Seller seller);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertUser", ReplyAction="http://tempuri.org/IService/InsertUserResponse")]
        void InsertUser(ASPServer.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertUser", ReplyAction="http://tempuri.org/IService/InsertUserResponse")]
        System.Threading.Tasks.Task InsertUserAsync(ASPServer.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserUserByPhone", ReplyAction="http://tempuri.org/IService/GetUserUserByPhoneResponse")]
        ASPServer.ServiceReference.User GetUserUserByPhone(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserUserByPhone", ReplyAction="http://tempuri.org/IService/GetUserUserByPhoneResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.User> GetUserUserByPhoneAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Collections.Generic.List<ASPServer.ServiceReference.User> GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllUsers", ReplyAction="http://tempuri.org/IService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.User>> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        void UpdateUser(ASPServer.ServiceReference.User user, System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> appointments, string name, string address, string zipCode, string phone, string mobil, string email, string misc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(ASPServer.ServiceReference.User user, System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> appointments, string name, string address, string zipCode, string phone, string mobil, string email, string misc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        void DeleteUser(ASPServer.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(ASPServer.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBuyerById", ReplyAction="http://tempuri.org/IService/GetBuyerByIdResponse")]
        ASPServer.ServiceReference.Buyer GetBuyerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetBuyerById", ReplyAction="http://tempuri.org/IService/GetBuyerByIdResponse")]
        System.Threading.Tasks.Task<ASPServer.ServiceReference.Buyer> GetBuyerByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ASPServer.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ASPServer.ServiceReference.IService>, ASPServer.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertAppointment(ASPServer.ServiceReference.Appointment appointment) {
            base.Channel.InsertAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task InsertAppointmentAsync(ASPServer.ServiceReference.Appointment appointment) {
            return base.Channel.InsertAppointmentAsync(appointment);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> GetAppointment(System.DateTime date) {
            return base.Channel.GetAppointment(date);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Appointment>> GetAppointmentAsync(System.DateTime date) {
            return base.Channel.GetAppointmentAsync(date);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> GetAllAppointments() {
            return base.Channel.GetAllAppointments();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Appointment>> GetAllAppointmentsAsync() {
            return base.Channel.GetAllAppointmentsAsync();
        }
        
        public void UpdateAppointment(ASPServer.ServiceReference.Appointment appointment, System.DateTime date, System.DateTime StartTime, System.DateTime EndTime, string category, string descricption, string status, ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Buyer buyer) {
            base.Channel.UpdateAppointment(appointment, date, StartTime, EndTime, category, descricption, status, seller, buyer);
        }
        
        public System.Threading.Tasks.Task UpdateAppointmentAsync(ASPServer.ServiceReference.Appointment appointment, System.DateTime date, System.DateTime StartTime, System.DateTime EndTime, string category, string descricption, string status, ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Buyer buyer) {
            return base.Channel.UpdateAppointmentAsync(appointment, date, StartTime, EndTime, category, descricption, status, seller, buyer);
        }
        
        public void DeleteAppointment(ASPServer.ServiceReference.Appointment appointment) {
            base.Channel.DeleteAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task DeleteAppointmentAsync(ASPServer.ServiceReference.Appointment appointment) {
            return base.Channel.DeleteAppointmentAsync(appointment);
        }
        
        public void InsertBuyer(ASPServer.ServiceReference.Buyer buyer) {
            base.Channel.InsertBuyer(buyer);
        }
        
        public System.Threading.Tasks.Task InsertBuyerAsync(ASPServer.ServiceReference.Buyer buyer) {
            return base.Channel.InsertBuyerAsync(buyer);
        }
        
        public ASPServer.ServiceReference.Buyer GetBuyerByPhone(string phone) {
            return base.Channel.GetBuyerByPhone(phone);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Buyer> GetBuyerByPhoneAsync(string phone) {
            return base.Channel.GetBuyerByPhoneAsync(phone);
        }
        
        public ASPServer.ServiceReference.Buyer GetBuyerByMobile(string mobile) {
            return base.Channel.GetBuyerByMobile(mobile);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Buyer> GetBuyerByMobileAsync(string mobile) {
            return base.Channel.GetBuyerByMobileAsync(mobile);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Buyer> GetAllBuyers() {
            return base.Channel.GetAllBuyers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Buyer>> GetAllBuyersAsync() {
            return base.Channel.GetAllBuyersAsync();
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetAllLocationsByPhone(string phone) {
            return base.Channel.GetAllLocationsByPhone(phone);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetAllLocationsByPhoneAsync(string phone) {
            return base.Channel.GetAllLocationsByPhoneAsync(phone);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetAllLocationsByMobile(string mobile) {
            return base.Channel.GetAllLocationsByMobile(mobile);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetAllLocationsByMobileAsync(string mobile) {
            return base.Channel.GetAllLocationsByMobileAsync(mobile);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllPropertiesByPhone(string phone) {
            return base.Channel.GetAllPropertiesByPhone(phone);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesByPhoneAsync(string phone) {
            return base.Channel.GetAllPropertiesByPhoneAsync(phone);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllPropertiesByMobile(string mobile) {
            return base.Channel.GetAllPropertiesByMobile(mobile);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesByMobileAsync(string mobile) {
            return base.Channel.GetAllPropertiesByMobileAsync(mobile);
        }
        
        public void UpdateBuyer(
                    ASPServer.ServiceReference.Buyer buyer, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, 
                    string name, 
                    string address, 
                    string zipCode, 
                    string phone, 
                    string mobil, 
                    string email, 
                    string misc, 
                    string estateType, 
                    double minPrice, 
                    double maxPrice, 
                    double lotSizeMin, 
                    double lotSizeMax, 
                    double probertySizeMin, 
                    double probertySizeMax, 
                    double desiredRoomsMin, 
                    double desiredRoomsMax, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Location> desiredLocations, 
                    string otherPref, 
                    bool contactAllowedByBoligOne, 
                    bool contactAllowedByReal, 
                    bool allowedEmailSpam, 
                    bool inRKI, 
                    bool buyerApproved, 
                    string bank, 
                    bool ownesHouse, 
                    bool livesForRent) {
            base.Channel.UpdateBuyer(buyer, properties, name, address, zipCode, phone, mobil, email, misc, estateType, minPrice, maxPrice, lotSizeMin, lotSizeMax, probertySizeMin, probertySizeMax, desiredRoomsMin, desiredRoomsMax, desiredLocations, otherPref, contactAllowedByBoligOne, contactAllowedByReal, allowedEmailSpam, inRKI, buyerApproved, bank, ownesHouse, livesForRent);
        }
        
        public System.Threading.Tasks.Task UpdateBuyerAsync(
                    ASPServer.ServiceReference.Buyer buyer, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, 
                    string name, 
                    string address, 
                    string zipCode, 
                    string phone, 
                    string mobil, 
                    string email, 
                    string misc, 
                    string estateType, 
                    double minPrice, 
                    double maxPrice, 
                    double lotSizeMin, 
                    double lotSizeMax, 
                    double probertySizeMin, 
                    double probertySizeMax, 
                    double desiredRoomsMin, 
                    double desiredRoomsMax, 
                    System.Collections.Generic.List<ASPServer.ServiceReference.Location> desiredLocations, 
                    string otherPref, 
                    bool contactAllowedByBoligOne, 
                    bool contactAllowedByReal, 
                    bool allowedEmailSpam, 
                    bool inRKI, 
                    bool buyerApproved, 
                    string bank, 
                    bool ownesHouse, 
                    bool livesForRent) {
            return base.Channel.UpdateBuyerAsync(buyer, properties, name, address, zipCode, phone, mobil, email, misc, estateType, minPrice, maxPrice, lotSizeMin, lotSizeMax, probertySizeMin, probertySizeMax, desiredRoomsMin, desiredRoomsMax, desiredLocations, otherPref, contactAllowedByBoligOne, contactAllowedByReal, allowedEmailSpam, inRKI, buyerApproved, bank, ownesHouse, livesForRent);
        }
        
        public void UpdateBuyerSingle(ASPServer.ServiceReference.Buyer buyer) {
            base.Channel.UpdateBuyerSingle(buyer);
        }
        
        public System.Threading.Tasks.Task UpdateBuyerSingleAsync(ASPServer.ServiceReference.Buyer buyer) {
            return base.Channel.UpdateBuyerSingleAsync(buyer);
        }
        
        public void DeleteBuyer(ASPServer.ServiceReference.Buyer buyer) {
            base.Channel.DeleteBuyer(buyer);
        }
        
        public System.Threading.Tasks.Task DeleteBuyerAsync(ASPServer.ServiceReference.Buyer buyer) {
            return base.Channel.DeleteBuyerAsync(buyer);
        }
        
        public void InsertLocation(ASPServer.ServiceReference.Location location) {
            base.Channel.InsertLocation(location);
        }
        
        public System.Threading.Tasks.Task InsertLocationAsync(ASPServer.ServiceReference.Location location) {
            return base.Channel.InsertLocationAsync(location);
        }
        
        public ASPServer.ServiceReference.Location GetLocation(string zipCode) {
            return base.Channel.GetLocation(zipCode);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Location> GetLocationAsync(string zipCode) {
            return base.Channel.GetLocationAsync(zipCode);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetLocationsByCity(string city) {
            return base.Channel.GetLocationsByCity(city);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetLocationsByCityAsync(string city) {
            return base.Channel.GetLocationsByCityAsync(city);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Location> GetAllLocations() {
            return base.Channel.GetAllLocations();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Location>> GetAllLocationsAsync() {
            return base.Channel.GetAllLocationsAsync();
        }
        
        public void UpdateLocation(ASPServer.ServiceReference.Location loc, string zipCode, string city) {
            base.Channel.UpdateLocation(loc, zipCode, city);
        }
        
        public System.Threading.Tasks.Task UpdateLocationAsync(ASPServer.ServiceReference.Location loc, string zipCode, string city) {
            return base.Channel.UpdateLocationAsync(loc, zipCode, city);
        }
        
        public void DeleteLocation(ASPServer.ServiceReference.Location loc) {
            base.Channel.DeleteLocation(loc);
        }
        
        public System.Threading.Tasks.Task DeleteLocationAsync(ASPServer.ServiceReference.Location loc) {
            return base.Channel.DeleteLocationAsync(loc);
        }
        
        public void InsertProperty(ASPServer.ServiceReference.Property property) {
            base.Channel.InsertProperty(property);
        }
        
        public System.Threading.Tasks.Task InsertPropertyAsync(ASPServer.ServiceReference.Property property) {
            return base.Channel.InsertPropertyAsync(property);
        }
        
        public ASPServer.ServiceReference.Property GetProperty(string address) {
            return base.Channel.GetProperty(address);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Property> GetPropertyAsync(string address) {
            return base.Channel.GetPropertyAsync(address);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetPropertiesByAddress(string address) {
            return base.Channel.GetPropertiesByAddress(address);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetPropertiesByAddressAsync(string address) {
            return base.Channel.GetPropertiesByAddressAsync(address);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllProperties() {
            return base.Channel.GetAllProperties();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesAsync() {
            return base.Channel.GetAllPropertiesAsync();
        }
        
        public void UpdateProperty(ASPServer.ServiceReference.Property property, string address, string zipCode, string type, int rooms, int floors, double price, double propertySize, double houseSize, int constructionYear) {
            base.Channel.UpdateProperty(property, address, zipCode, type, rooms, floors, price, propertySize, houseSize, constructionYear);
        }
        
        public System.Threading.Tasks.Task UpdatePropertyAsync(ASPServer.ServiceReference.Property property, string address, string zipCode, string type, int rooms, int floors, double price, double propertySize, double houseSize, int constructionYear) {
            return base.Channel.UpdatePropertyAsync(property, address, zipCode, type, rooms, floors, price, propertySize, houseSize, constructionYear);
        }
        
        public void DeleteProperty(ASPServer.ServiceReference.Property property) {
            base.Channel.DeleteProperty(property);
        }
        
        public System.Threading.Tasks.Task DeletePropertyAsync(ASPServer.ServiceReference.Property property) {
            return base.Channel.DeletePropertyAsync(property);
        }
        
        public ASPServer.ServiceReference.Property GetPropertyBySellerID(int sellerID) {
            return base.Channel.GetPropertyBySellerID(sellerID);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Property> GetPropertyBySellerIDAsync(int sellerID) {
            return base.Channel.GetPropertyBySellerIDAsync(sellerID);
        }
        
        public void InsertSeller(ASPServer.ServiceReference.Seller seller) {
            base.Channel.InsertSeller(seller);
        }
        
        public System.Threading.Tasks.Task InsertSellerAsync(ASPServer.ServiceReference.Seller seller) {
            return base.Channel.InsertSellerAsync(seller);
        }
        
        public ASPServer.ServiceReference.Seller GetSellerById(int id) {
            return base.Channel.GetSellerById(id);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Seller> GetSellerByIdAsync(int id) {
            return base.Channel.GetSellerByIdAsync(id);
        }
        
        public ASPServer.ServiceReference.Seller GetSellerByPhone(string phone) {
            return base.Channel.GetSellerByPhone(phone);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Seller> GetSellerByPhoneAsync(string phone) {
            return base.Channel.GetSellerByPhoneAsync(phone);
        }
        
        public ASPServer.ServiceReference.Seller GetSellerByMobile(string mobile) {
            return base.Channel.GetSellerByMobile(mobile);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Seller> GetSellerByMobileAsync(string mobile) {
            return base.Channel.GetSellerByMobileAsync(mobile);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Seller> GetAllSellers() {
            return base.Channel.GetAllSellers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Seller>> GetAllSellersAsync() {
            return base.Channel.GetAllSellersAsync();
        }
        
        public void UpdateSeller(ASPServer.ServiceReference.Seller seller, System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, string name, string address, string zipCode, string phone, string mobil, string email, string misc) {
            base.Channel.UpdateSeller(seller, properties, name, address, zipCode, phone, mobil, email, misc);
        }
        
        public System.Threading.Tasks.Task UpdateSellerAsync(ASPServer.ServiceReference.Seller seller, System.Collections.Generic.List<ASPServer.ServiceReference.Property> properties, string name, string address, string zipCode, string phone, string mobil, string email, string misc) {
            return base.Channel.UpdateSellerAsync(seller, properties, name, address, zipCode, phone, mobil, email, misc);
        }
        
        public void UpdateSellerSingle(ASPServer.ServiceReference.Seller seller) {
            base.Channel.UpdateSellerSingle(seller);
        }
        
        public System.Threading.Tasks.Task UpdateSellerSingleAsync(ASPServer.ServiceReference.Seller seller) {
            return base.Channel.UpdateSellerSingleAsync(seller);
        }
        
        public void DeleteSeller(ASPServer.ServiceReference.Seller seller) {
            base.Channel.DeleteSeller(seller);
        }
        
        public System.Threading.Tasks.Task DeleteSellerAsync(ASPServer.ServiceReference.Seller seller) {
            return base.Channel.DeleteSellerAsync(seller);
        }
        
        public void AddPropertyToSeller(ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Property property) {
            base.Channel.AddPropertyToSeller(seller, property);
        }
        
        public System.Threading.Tasks.Task AddPropertyToSellerAsync(ASPServer.ServiceReference.Seller seller, ASPServer.ServiceReference.Property property) {
            return base.Channel.AddPropertyToSellerAsync(seller, property);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.Property> GetAllPropertiesFromSeller(ASPServer.ServiceReference.Seller seller) {
            return base.Channel.GetAllPropertiesFromSeller(seller);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.Property>> GetAllPropertiesFromSellerAsync(ASPServer.ServiceReference.Seller seller) {
            return base.Channel.GetAllPropertiesFromSellerAsync(seller);
        }
        
        public void InsertUser(ASPServer.ServiceReference.User user) {
            base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task InsertUserAsync(ASPServer.ServiceReference.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public ASPServer.ServiceReference.User GetUserUserByPhone(string phone) {
            return base.Channel.GetUserUserByPhone(phone);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.User> GetUserUserByPhoneAsync(string phone) {
            return base.Channel.GetUserUserByPhoneAsync(phone);
        }
        
        public System.Collections.Generic.List<ASPServer.ServiceReference.User> GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ASPServer.ServiceReference.User>> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public void UpdateUser(ASPServer.ServiceReference.User user, System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> appointments, string name, string address, string zipCode, string phone, string mobil, string email, string misc) {
            base.Channel.UpdateUser(user, appointments, name, address, zipCode, phone, mobil, email, misc);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(ASPServer.ServiceReference.User user, System.Collections.Generic.List<ASPServer.ServiceReference.Appointment> appointments, string name, string address, string zipCode, string phone, string mobil, string email, string misc) {
            return base.Channel.UpdateUserAsync(user, appointments, name, address, zipCode, phone, mobil, email, misc);
        }
        
        public void DeleteUser(ASPServer.ServiceReference.User user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(ASPServer.ServiceReference.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public ASPServer.ServiceReference.Buyer GetBuyerById(int id) {
            return base.Channel.GetBuyerById(id);
        }
        
        public System.Threading.Tasks.Task<ASPServer.ServiceReference.Buyer> GetBuyerByIdAsync(int id) {
            return base.Channel.GetBuyerByIdAsync(id);
        }
    }
}
