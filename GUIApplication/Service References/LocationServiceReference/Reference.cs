//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUIApplication.LocationServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/ModelLayer")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LocationServiceReference.ILocationService")]
    public interface ILocationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/InsertLocation", ReplyAction="http://tempuri.org/ILocationService/InsertLocationResponse")]
        void InsertLocation(GUIApplication.LocationServiceReference.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/InsertLocation", ReplyAction="http://tempuri.org/ILocationService/InsertLocationResponse")]
        System.Threading.Tasks.Task InsertLocationAsync(GUIApplication.LocationServiceReference.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/GetLocation", ReplyAction="http://tempuri.org/ILocationService/GetLocationResponse")]
        GUIApplication.LocationServiceReference.Location GetLocation(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/GetLocation", ReplyAction="http://tempuri.org/ILocationService/GetLocationResponse")]
        System.Threading.Tasks.Task<GUIApplication.LocationServiceReference.Location> GetLocationAsync(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/GetLocationsByCity", ReplyAction="http://tempuri.org/ILocationService/GetLocationsByCityResponse")]
        GUIApplication.LocationServiceReference.Location[] GetLocationsByCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/GetLocationsByCity", ReplyAction="http://tempuri.org/ILocationService/GetLocationsByCityResponse")]
        System.Threading.Tasks.Task<GUIApplication.LocationServiceReference.Location[]> GetLocationsByCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/GetAllLocations", ReplyAction="http://tempuri.org/ILocationService/GetAllLocationsResponse")]
        GUIApplication.LocationServiceReference.Location[] GetAllLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/GetAllLocations", ReplyAction="http://tempuri.org/ILocationService/GetAllLocationsResponse")]
        System.Threading.Tasks.Task<GUIApplication.LocationServiceReference.Location[]> GetAllLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/UpdateLocation", ReplyAction="http://tempuri.org/ILocationService/UpdateLocationResponse")]
        void UpdateLocation(GUIApplication.LocationServiceReference.Location loc, string zipCode, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/UpdateLocation", ReplyAction="http://tempuri.org/ILocationService/UpdateLocationResponse")]
        System.Threading.Tasks.Task UpdateLocationAsync(GUIApplication.LocationServiceReference.Location loc, string zipCode, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/DeleteLocation", ReplyAction="http://tempuri.org/ILocationService/DeleteLocationResponse")]
        void DeleteLocation(GUIApplication.LocationServiceReference.Location loc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocationService/DeleteLocation", ReplyAction="http://tempuri.org/ILocationService/DeleteLocationResponse")]
        System.Threading.Tasks.Task DeleteLocationAsync(GUIApplication.LocationServiceReference.Location loc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILocationServiceChannel : GUIApplication.LocationServiceReference.ILocationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LocationServiceClient : System.ServiceModel.ClientBase<GUIApplication.LocationServiceReference.ILocationService>, GUIApplication.LocationServiceReference.ILocationService {
        
        public LocationServiceClient() {
        }
        
        public LocationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LocationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LocationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void InsertLocation(GUIApplication.LocationServiceReference.Location location) {
            base.Channel.InsertLocation(location);
        }
        
        public System.Threading.Tasks.Task InsertLocationAsync(GUIApplication.LocationServiceReference.Location location) {
            return base.Channel.InsertLocationAsync(location);
        }
        
        public GUIApplication.LocationServiceReference.Location GetLocation(string zipCode) {
            return base.Channel.GetLocation(zipCode);
        }
        
        public System.Threading.Tasks.Task<GUIApplication.LocationServiceReference.Location> GetLocationAsync(string zipCode) {
            return base.Channel.GetLocationAsync(zipCode);
        }
        
        public GUIApplication.LocationServiceReference.Location[] GetLocationsByCity(string city) {
            return base.Channel.GetLocationsByCity(city);
        }
        
        public System.Threading.Tasks.Task<GUIApplication.LocationServiceReference.Location[]> GetLocationsByCityAsync(string city) {
            return base.Channel.GetLocationsByCityAsync(city);
        }
        
        public GUIApplication.LocationServiceReference.Location[] GetAllLocations() {
            return base.Channel.GetAllLocations();
        }
        
        public System.Threading.Tasks.Task<GUIApplication.LocationServiceReference.Location[]> GetAllLocationsAsync() {
            return base.Channel.GetAllLocationsAsync();
        }
        
        public void UpdateLocation(GUIApplication.LocationServiceReference.Location loc, string zipCode, string city) {
            base.Channel.UpdateLocation(loc, zipCode, city);
        }
        
        public System.Threading.Tasks.Task UpdateLocationAsync(GUIApplication.LocationServiceReference.Location loc, string zipCode, string city) {
            return base.Channel.UpdateLocationAsync(loc, zipCode, city);
        }
        
        public void DeleteLocation(GUIApplication.LocationServiceReference.Location loc) {
            base.Channel.DeleteLocation(loc);
        }
        
        public System.Threading.Tasks.Task DeleteLocationAsync(GUIApplication.LocationServiceReference.Location loc) {
            return base.Channel.DeleteLocationAsync(loc);
        }
    }
}
